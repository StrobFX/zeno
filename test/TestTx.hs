
module TestTx where

import Network.Ethereum
import Network.Ethereum.Transaction

import TestUtils


unit_decode_tx :: IO ()
unit_decode_tx = do
  let txbin = "0xf86c0a85046c7cfe0083016dea94d1310c1e038bc12865d3d3997275b3e4737c6302880b503be34d9fe80080269fc7eaaa9c21f59adf8ad43ed66cf5ef9ee1c317bd4d32cd65401e7aaca47cfaa0387d79c65b90be6260d09dcfb780f29dd8133b9b1ceb20b83b7e442b4bfc30cb"
  let Right tx = decodeTx $ unHex txbin
  let txNoSig = tx { _sig = Nothing }
  decodeTx (encodeTx txNoSig) @?= Right txNoSig
  Right tx @?= decodeTx (encodeTx tx)
  hashTx tx @?= "0xb9d4ad5408f53eac8627f9ccd840ba8fb3469d55cd9cc2a11c6e049f1eef4edd"


unit_large_tx_id :: IO ()
unit_large_tx_id = do
  hashTx largeTx @?= "9d3d7e999bc000897c9e42bebbf89b8546af0f78d42ce0be553eb9570e30ca85"


unit_large_tx_recover :: IO ()
unit_large_tx_recover = do
  let signed = signTx sk $ largeTx { _sig = Nothing }
  recoverFrom signed @?= Just addr



sk :: SecKey
sk = "afdf0310c3feab2378267034604525c6adbca360630e187ae79eb534698145cd"

addr :: Address
EthIdent _ addr = deriveEthIdent sk
-- addr = "0x118088550C93Fc08B5ac1E196e0E97BAD3962c63"


largeTx :: Transaction
largeTx = Tx
    { _nonce = 0
    , _value = 0
    , _to = Just "0xa40207f6c35fc0e5a055f58ba6cadff7907cc1d9"
    , _sig = Just (CompactRecSig {sigR = "\184\165\142\aaS\220\244\190\129\163\148\182\155\n\143K\SUB\221\176Fo\141j\177\196\211D\EMv\228\CAN", sigS = "Z\176\226\221\212B1\187\229>\221\EOT\250\190\207c\233\139\145%\ETB\155\251\174\193U\225\162\207#Qb", sigV = 0})
    , _gasPrice = 3000000000
    , _gas = 165583
    , _data = unHex "23974c6800000000000000000000000095a61f8a79ffcb7ce723e8bac0082bdb74192c34000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000841a29fd70000000000000000000000000000000000000000000000000000000000000005a029e9deb56828fff5ab9955b668d34b078d7153bae6c7508c1fa15083446c18800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004174dddb1eeb1215cdb13d7dda6beec5e311385fff7013ffca61e92b9b52fd7ca1a081f13cdee622744362478c68e02524d5bdef0882b6251a97d9a3e2a3b5adbeefcd38e88f4f29437e09e366ca481893793030d6be0c12cc8ed175459a04f756c8f728aa5a206d3766d67f04ccaedcdd1faf62b4157be21d5fe1a8f5b0aed380000000000000000000000000000000000000000000000000000000000000004756eba838e288d889bdd4cf85b3263ed8677b9bd10a64db42144f02e4a2ef3a91c6cdb45dc2e66cbf9fe278ec2867499453e80bbca965577a7bd38fae328e7af3bab8ef16bc5cd6b2ab7e28666d637ca1bdc917665887ec1a0ee7d638bb5c3432f4035cb981943ca58f74b95c5dfe169bfd0450983c40da89345e61d172200b000000000000000000000000000000000000000000000000000000000000000041c1c1b1c00000000000000000000000000000000000000000000000000000000"
    , _chainId = 1
    }
